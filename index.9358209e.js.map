{"mappings":"ACGA,IAAM,EAAY,SAAS,aAAa,CAAC,cACnC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAQ,SAAS,aAAa,CAAC,UAiBrC,EAAU,gBAAgB,CAAC,QAAS,SAAU,CAAC,EAC7C,GACE,AAAC,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,eAC5B,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,eAC5B,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,kBAC5B,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,kBAK/B,GAAI,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,cAAe,CAI7C,IAAK,IAvBD,EACA,EAmBE,EAAS,SAAS,aAAa,CAAC,MAChC,EAAkB,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAEzC,EAAI,EAAG,EAAI,EAAiB,IAAK,CACxC,IAAM,EAAU,SAAS,aAAa,CAAC,MAEvC,EAAO,MAAM,CAAC,EAChB,CAEA,EAAM,MAAM,CAAC,EACf,CAEA,GAAI,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,cAAe,CAC7C,IAAM,EAAO,SAAS,gBAAgB,CAAC,KAEnC,CAAA,EAAK,MAAM,CAxCF,GAyCX,CAAI,CAAC,EAAK,MAAM,CAAG,EAAE,CAAC,MAAM,EAEhC,CAEA,GAAI,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,iBAAkB,CAChD,IAAM,EAAO,SAAS,gBAAgB,CAAC,MAElC,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,CAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAmB,CAAnB,IAAM,EAAN,EAAA,KAAA,CACG,EAAU,SAAS,aAAa,CAAC,MAEvC,EAAI,MAAM,CAAC,GACX,EAAM,MAAM,CAAC,EACf,C,C,M,E,CALK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAMP,CAEA,GAAI,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,iBAAkB,CAChD,IAAM,EAAO,SAAS,gBAAgB,CAAC,MAElC,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,CAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,AACC,CAAA,EAAI,KAAK,CAAC,MAAM,CA1DN,GA2DZ,EAAI,UAAU,CAAC,G,C,C,M,E,CAFd,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAKP,CA3DM,EAAW,SAAS,gBAAgB,CAAC,MAAM,MAAM,CACjD,EAAc,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAE9C,EAAU,QAAQ,CAAG,GATN,GAUf,EAAU,QAAQ,CAAG,GATN,EAUf,EAAa,QAAQ,CAAG,GATN,GAUlB,EAAa,QAAQ,CAAG,GATN,EAiEpB","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\n// write code here\nvar container = document.querySelector(\".container\");\nvar appendRow = document.querySelector(\".append-row\");\nvar removeRow = document.querySelector(\".remove-row\");\nvar appendColumn = document.querySelector(\".append-column\");\nvar removeColumn = document.querySelector(\".remove-column\");\nvar table = document.querySelector(\".field\");\nvar MAX_ROWS = 10;\nvar MIN_ROWS = 2;\nvar MAX_COLUMNS = 10;\nvar MIN_COLUMNS = 2;\nfunction updateButtonState() {\n    var rowCount = document.querySelectorAll(\"tr\").length;\n    var columnCount = table.rows[0].cells.length;\n    appendRow.disabled = rowCount >= MAX_ROWS;\n    removeRow.disabled = rowCount <= MIN_ROWS;\n    appendColumn.disabled = columnCount >= MAX_COLUMNS;\n    removeColumn.disabled = columnCount <= MIN_COLUMNS;\n}\ncontainer.addEventListener(\"click\", function(e) {\n    if (!e.target.classList.contains(\"append-row\") && !e.target.classList.contains(\"remove-row\") && !e.target.classList.contains(\"append-column\") && !e.target.classList.contains(\"remove-column\")) return;\n    if (e.target.classList.contains(\"append-row\")) {\n        var newRow = document.createElement(\"tr\");\n        var numberOfColumns = table.rows[0].cells.length;\n        for(var i = 0; i < numberOfColumns; i++){\n            var newCell = document.createElement(\"td\");\n            newRow.append(newCell);\n        }\n        table.append(newRow);\n    }\n    if (e.target.classList.contains(\"remove-row\")) {\n        var rows = document.querySelectorAll(\"tr\");\n        if (rows.length > MIN_ROWS) rows[rows.length - 1].remove();\n    }\n    if (e.target.classList.contains(\"append-column\")) {\n        var rows1 = document.querySelectorAll(\"tr\");\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = rows1[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var row = _step.value;\n                var newCell1 = document.createElement(\"td\");\n                row.append(newCell1);\n                table.append(row);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    }\n    if (e.target.classList.contains(\"remove-column\")) {\n        var rows2 = document.querySelectorAll(\"tr\");\n        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n        try {\n            for(var _iterator1 = rows2[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                var row1 = _step1.value;\n                if (row1.cells.length > MIN_COLUMNS) row1.deleteCell(-1);\n            }\n        } catch (err) {\n            _didIteratorError1 = true;\n            _iteratorError1 = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                    _iterator1.return();\n                }\n            } finally{\n                if (_didIteratorError1) {\n                    throw _iteratorError1;\n                }\n            }\n        }\n    }\n    updateButtonState();\n});\n\n//# sourceMappingURL=index.9358209e.js.map\n","'use strict';\n\n// write code here\nconst container = document.querySelector('.container');\nconst appendRow = document.querySelector('.append-row');\nconst removeRow = document.querySelector('.remove-row');\nconst appendColumn = document.querySelector('.append-column');\nconst removeColumn = document.querySelector('.remove-column');\nconst table = document.querySelector('.field');\n\nconst MAX_ROWS = 10;\nconst MIN_ROWS = 2;\nconst MAX_COLUMNS = 10;\nconst MIN_COLUMNS = 2;\n\nfunction updateButtonState() {\n  const rowCount = document.querySelectorAll('tr').length;\n  const columnCount = table.rows[0].cells.length;\n\n  appendRow.disabled = rowCount >= MAX_ROWS;\n  removeRow.disabled = rowCount <= MIN_ROWS;\n  appendColumn.disabled = columnCount >= MAX_COLUMNS;\n  removeColumn.disabled = columnCount <= MIN_COLUMNS;\n}\n\ncontainer.addEventListener('click', function (e) {\n  if (\n    !e.target.classList.contains('append-row') &&\n    !e.target.classList.contains('remove-row') &&\n    !e.target.classList.contains('append-column') &&\n    !e.target.classList.contains('remove-column')\n  ) {\n    return;\n  }\n\n  if (e.target.classList.contains('append-row')) {\n    const newRow = document.createElement('tr');\n    const numberOfColumns = table.rows[0].cells.length;\n\n    for (let i = 0; i < numberOfColumns; i++) {\n      const newCell = document.createElement('td');\n\n      newRow.append(newCell);\n    }\n\n    table.append(newRow);\n  }\n\n  if (e.target.classList.contains('remove-row')) {\n    const rows = document.querySelectorAll('tr');\n\n    if (rows.length > MIN_ROWS) {\n      rows[rows.length - 1].remove();\n    }\n  }\n\n  if (e.target.classList.contains('append-column')) {\n    const rows = document.querySelectorAll('tr');\n\n    for (const row of rows) {\n      const newCell = document.createElement('td');\n\n      row.append(newCell);\n      table.append(row);\n    }\n  }\n\n  if (e.target.classList.contains('remove-column')) {\n    const rows = document.querySelectorAll('tr');\n\n    for (const row of rows) {\n      if (row.cells.length > MIN_COLUMNS) {\n        row.deleteCell(-1);\n      }\n    }\n  }\n\n  updateButtonState();\n});\n"],"names":["container","document","querySelector","appendRow","removeRow","appendColumn","removeColumn","table","addEventListener","e","target","classList","contains","rowCount","columnCount","newRow","createElement","numberOfColumns","rows","cells","length","i","newCell","append","querySelectorAll","remove","rows1","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","newCell1","err","return","rows2","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","row1","deleteCell","disabled"],"version":3,"file":"index.9358209e.js.map"}